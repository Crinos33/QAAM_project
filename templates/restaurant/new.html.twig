{% extends 'base.html.twig' %}

{% block title %}New Restaurant{% endblock %}
{% block stylesheets %}
    <style>
        /* Always set the map height explicitly to define the size of the div
         * element that contains the map. */
        #map {
            height: 100%;
        }
        .map-row{
            height: 400px;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
        #pac-container {
            padding-bottom: 12px;
            margin-right: 12px;
        }
        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }
        #pac-input:focus {
            border-color: #4d90fe;
        }
        #title {
            color: #fff;
            background-color: #4d90fe;
            font-size: 25px;
            font-weight: 500;
            padding: 6px 12px;
        }
    </style>
{% endblock %}
{% block body %}
    <div class="container-fluid">
        <div class="row map-row">
            <div id="map" class="col-12"></div>
        </div>
    </div>
    <h1>Create new Restaurant</h1>
    <div class="row" id="pac-card">
        <h1 id="title" class="col-12">
                Aide Ã  la recherche :
        </h1>
        <div id="pac-container" class="col-12">
            <input class="form-control" id="pac-input" type="text"
                   placeholder="chercher un restaurant">
        </div>
    </div>
    {{ include('restaurant/_form.html.twig') }}

    <a href="{{ path('restaurant_index') }}">back to list</a>
{% endblock %}
{% block javascripts %}
    <script>
        function populateInputs(name, address, zipcode, city, lat, lng){
            $("#restaurant_name").val(name);
            $("#restaurant_address").val(address);
            $("#restaurant_zipcode").val(zipcode);
            $("#restaurant_city").val(city);
            $("#restaurant_lat").val(lat);
            $("#restaurant_lng").val(lng);
        }
        function initMap() {
            var map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 44.859822, lng: -0.55666},
                zoom: 16,
                streetViewControl: false,
            });
            var geocoder = new google.maps.Geocoder;
            google.maps.event.addListener(map, 'click', function(e) {
                //alert('clicked @' + e.latLng.toString())
                geocoder.geocode({
                    'location': e.latLng
                }, function(results, status) {
                    if (status === google.maps.GeocoderStatus.OK) {
                        if (results[0]) {

                            var placeId = results[0].place_id;
                            var request = {
                                placeId: placeId,
                                fields: ['name', 'address_components', 'place_id', 'geometry'],
                                types: ['establishment']
                            };
                            var service = new google.maps.places.PlacesService(map);
                            service.getDetails(request, function(place, status) {
                                if (status === google.maps.places.PlacesServiceStatus.OK) {
                                    console.log(place);
                                    if (!place.geometry) {
                                        // User entered the name of a Place that was not suggested and
                                        // pressed the Enter key, or the Place Details request failed.
                                        window.alert("No details available for input: '" + place.name + "'");
                                        return;
                                    }
                                    var address = '';
                                    if (place.address_components) {
                                        address = [
                                            (place.address_components[0] && place.address_components[0].short_name || ''),
                                            (place.address_components[1] && place.address_components[1].short_name || ''),

                                        ].join(' ');
                                        var zipcode = (place.address_components[6] && place.address_components[6].short_name || '');
                                        var city = (place.address_components[2] && place.address_components[2].short_name || '');
                                    }
                                    var name = place.name || '';
                                    var location = place.geometry.location || {},
                                        lat = location.lat() || '',
                                        lng = location.lng() || '';
                                    populateInputs(name, address, zipcode, city, lat, lng);
                                }
                            });
                        } else {
                            //console.log('No results found');
                        }
                    } else {
                        //console.log('Geocoder failed due to: ' + status);
                    }
                });

            });
            var input = document.getElementById('pac-input');


            var autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.bindTo('bounds', map);
            autocomplete.setFields(
                ['address_components', 'geometry', 'icon', 'name']);
            autocomplete.setTypes(['establishment']);
            autocomplete.setOptions({strictBounds: false});
            var marker = new google.maps.Marker({
                map: map,
                anchorPoint: new google.maps.Point(0, -29)
            });
            autocomplete.addListener('place_changed', function() {
                marker.setVisible(false);
                var place = autocomplete.getPlace();
                if (!place.geometry) {
                    // User entered the name of a Place that was not suggested and
                    // pressed the Enter key, or the Place Details request failed.
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }
                if (place.geometry.viewport) {
                    map.fitBounds(place.geometry.viewport);
                } else {
                    map.setCenter(place.geometry.location);
                    map.setZoom(17);  // Pourquoi 17? tu sais pourquoi orangina rouge est mechant ? lol
                }
                marker.setPosition(place.geometry.location);
                marker.setVisible(true);
                var address = '';
                if (place.address_components) {
                    address = [
                        (place.address_components[0] && place.address_components[0].short_name || ''),
                        (place.address_components[1] && place.address_components[1].short_name || ''),

                    ].join(' ');
                    var zipcode = (place.address_components[6] && place.address_components[6].short_name || '');
                    var city = (place.address_components[2] && place.address_components[2].short_name || '');
                }
                var name = place.name || '';
                var location = place.geometry.location || {},
                    lat = location.lat() || '',
                    lng = location.lng() || '';
                populateInputs(name, address, zipcode, city, lat, lng);
            });
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCA7y5uYliRbuHQXde_CMzSQRTfR9OEKrM&libraries=places&callback=initMap"
            async defer></script>
{% endblock %}
